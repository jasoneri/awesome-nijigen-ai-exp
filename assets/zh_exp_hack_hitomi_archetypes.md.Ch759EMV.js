import{_ as s,c as i,o as a,aj as n}from"./chunks/framework.CIu37z2K.js";const E=JSON.parse('{"title":"Hitomi自动破解加密系统实施方案","description":"","frontmatter":{},"headers":[],"relativePath":"zh/exp/hack_hitomi/archetypes.md","filePath":"zh/exp/hack_hitomi/archetypes.md"}'),t={name:"zh/exp/hack_hitomi/archetypes.md"},l=n(`<h1 id="hitomi自动破解加密系统实施方案" tabindex="-1">Hitomi自动破解加密系统实施方案 <a class="header-anchor" href="#hitomi自动破解加密系统实施方案" aria-label="Permalink to &quot;Hitomi自动破解加密系统实施方案&quot;">​</a></h1><blockquote><p>本文档作为实施参考，将根据讨论持续更新。 本蓝图文档更新的触发点包括且不限于：方案实现方向有误、功能无法实现等；</p></blockquote><h2 id="_1-系统概述" tabindex="-1">1. 系统概述 <a class="header-anchor" href="#_1-系统概述" aria-label="Permalink to &quot;1. 系统概述&quot;">​</a></h2><p>Hitomi自动破解加密系统是一个基于Python的Web内容解密工具，通过MCP（Model Context Protocol）接收用户提供的真实URL，自动检测现有解密器失效并更新解密逻辑。系统保持现有HitomiUtils解密器接口不变，通过独立的更新器模块来维护解密算法的时效性。</p><h2 id="_2-技术栈选择" tabindex="-1">2. 技术栈选择 <a class="header-anchor" href="#_2-技术栈选择" aria-label="Permalink to &quot;2. 技术栈选择&quot;">​</a></h2><h3 id="_2-1-核心功能库" tabindex="-1">2.1 核心功能库 <a class="header-anchor" href="#_2-1-核心功能库" aria-label="Permalink to &quot;2.1 核心功能库&quot;">​</a></h3><table tabindex="0"><thead><tr><th>功能模块</th><th>推荐库</th><th>备选库</th><th>说明</th></tr></thead><tbody><tr><td>MCP协议</td><td><code>mcp</code></td><td>自定义实现</td><td>模型上下文协议支持</td></tr><tr><td>HTTP请求</td><td><code>httpx</code></td><td><code>requests</code></td><td>获取common.js等资源</td></tr><tr><td>JavaScript解析</td><td><code>re</code></td><td><code>ast</code></td><td>简单正则解析JS变化</td></tr><tr><td>代码生成</td><td><code>ast</code></td><td>字符串模板</td><td>生成Python更新代码</td></tr><tr><td>日志记录</td><td><code>loguru</code></td><td><code>logging</code></td><td>执行过程记录和调试</td></tr></tbody></table><h3 id="_2-2-项目架构设计" tabindex="-1">2.2 项目架构设计 <a class="header-anchor" href="#_2-2-项目架构设计" aria-label="Permalink to &quot;2.2 项目架构设计&quot;">​</a></h3><p><strong>设计理念</strong>:</p><ul><li><strong>接口保持</strong>：现有HitomiUtils解密器接口完全不变</li><li><strong>独立更新</strong>：通过独立更新器检测和修复解密失效</li><li><strong>MCP协作</strong>：用户直接提供真实URL，无需浏览器验证</li><li><strong>最小复杂度</strong>：避免过度设计，专注核心功能</li></ul><p><strong>Python版本要求</strong>: Python 3.12+</p><p><strong>项目配置文件 (pyproject.toml)</strong>:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hack-hitomi&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">description = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hitomi自动破解加密系统 - 基于MCP的解密更新工具&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">requires-python = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=3.12&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies = [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;mcp&gt;=0.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;httpx&gt;=0.25.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;loguru&gt;=0.7.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;pyyaml&gt;=6.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optional-dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev = [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;pytest&gt;=7.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;pytest-asyncio&gt;=0.21.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;black&gt;=23.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://mirrors.aliyun.com/pypi/simple&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">default = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h2 id="_3-系统架构" tabindex="-1">3. 系统架构 <a class="header-anchor" href="#_3-系统架构" aria-label="Permalink to &quot;3. 系统架构&quot;">​</a></h2><h3 id="_3-1-核心模块设计" tabindex="-1">3.1 核心模块设计 <a class="header-anchor" href="#_3-1-核心模块设计" aria-label="Permalink to &quot;3.1 核心模块设计&quot;">​</a></h3><h4 id="_3-1-1-系统架构概览" tabindex="-1">3.1.1 系统架构概览 <a class="header-anchor" href="#_3-1-1-系统架构概览" aria-label="Permalink to &quot;3.1.1 系统架构概览&quot;">​</a></h4><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>现有解密器：HitomiUtils (__temp/ai/__init__.py)</span></span>
<span class="line"><span>├── 接口保持不变：get_img_url(img_hash, hasavif=0, preview=None)</span></span>
<span class="line"><span>└── 解密逻辑：gg类 + Decrypt类</span></span>
<span class="line"><span></span></span>
<span class="line"><span>独立更新器：HitomiDecryptUpdater</span></span>
<span class="line"><span>├── MCP服务：接收用户输入的真实URL</span></span>
<span class="line"><span>├── 验证器：对比本地解密结果与真实URL</span></span>
<span class="line"><span>├── JS获取器：通过httpx获取common.js</span></span>
<span class="line"><span>└── 代码生成器：生成更新代码修改HitomiUtils</span></span></code></pre></div><h4 id="_3-1-2-hitomiutils-现有解密器-保持不变" tabindex="-1">3.1.2 HitomiUtils 现有解密器（保持不变） <a class="header-anchor" href="#_3-1-2-hitomiutils-现有解密器-保持不变" aria-label="Permalink to &quot;3.1.2 HitomiUtils 现有解密器（保持不变）&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 位置：__temp/ai/__init__.py</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HitomiUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EroUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    现有Hitomi解密器 - 接口完全保持不变</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    核心方法：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    - get_img_url(img_hash, hasavif=0, preview=None) -&gt; str</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    - 内部类：gg, Decrypt</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_img_url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, img_hash: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hasavif</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, preview</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        核心解密接口 - 不允许修改</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span></code></pre></div><h4 id="_3-1-3-hitomidecryptupdater-独立更新器" tabindex="-1">3.1.3 HitomiDecryptUpdater 独立更新器 <a class="header-anchor" href="#_3-1-3-hitomidecryptupdater-独立更新器" aria-label="Permalink to &quot;3.1.3 HitomiDecryptUpdater 独立更新器&quot;">​</a></h4><p><strong>核心职责</strong>：</p><ul><li>通过importlib动态导入HitomiUtils模块</li><li>直接调用解密方法获取本地结果</li><li>对比本地结果与用户提供的真实URL</li><li>检测解密失效时执行更新流程</li></ul><p><strong>关键方法设计</strong>：</p><p><strong>verify_decrypt()</strong>：</p><ul><li>使用importlib.import_module导入HitomiUtils</li><li>直接调用get_img_url()获取本地解密结果</li><li>与真实URL进行字符串对比</li><li>返回布尔值表示是否匹配</li></ul><p><strong>update_decrypt_logic()</strong>：</p><ul><li>获取最新common.js内容</li><li>分析JS调用链变化</li><li>生成Python更新代码</li><li>应用更新到HitomiUtils模块</li></ul><p><strong>设计原则</strong>：</p><ul><li>简化调用链，避免冗余的中间方法</li><li>最小化日志输出，专注核心逻辑</li><li>保持代码简洁，避免过度封装</li></ul><h4 id="_3-1-4-mcp服务工具-精简版" tabindex="-1">3.1.4 MCP服务工具（精简版） <a class="header-anchor" href="#_3-1-4-mcp服务工具-精简版" aria-label="Permalink to &quot;3.1.4 MCP服务工具（精简版）&quot;">​</a></h4><p><strong>正确的 MCP API 使用方式</strong>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mcp.server.fastmcp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FastMCP</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建 MCP 服务实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mcp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FastMCP(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hitomi-decrypt-updater&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MCP工具函数 - 使用正确的 FastMCP API</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@mcp.tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update_hitomi_decrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img_hash: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, real_url: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    更新Hitomi解密逻辑</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    用户输入示例：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;当前图片hash为12345的真实url_new为https://aabb/cc/dd/12345.webp，给我更新加密&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    实现流程：</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    1. 直接导入HitomiUtils模块：importlib.import_module()</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2. 调用HitomiUtils(conf).get_img_url(img_hash)获取本地结果</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    3. 与real_url对比，如一致则跳过</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    4. 如不一致，获取硬编码的common.js URL</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    5. 分析JS变化并生成更新代码</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    6. 应用更新到HitomiUtils模块</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updater </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HitomiDecryptUpdater()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 验证是否需要更新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> updater.verify_decrypt(img_hash, real_url):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;解密结果一致，无需更新&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 执行更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> updater.update_decrypt_logic(img_hash, real_url)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;更新成功&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;更新失败&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意：不包含以下工具（硬编码，无需MCP）：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - get_common_js: common.js URL硬编码在代码中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - get_config_info: 配置信息硬编码，无需查询</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - set_common_js_url: URL硬编码，无需动态设置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - compare_decrypt_result: 内部逻辑，无需暴露为MCP工具</span></span></code></pre></div><h3 id="_3-2-数据流和模块交互" tabindex="-1">3.2 数据流和模块交互 <a class="header-anchor" href="#_3-2-数据流和模块交互" aria-label="Permalink to &quot;3.2 数据流和模块交互&quot;">​</a></h3><h4 id="_3-2-1-正常解密流程-无需更新" tabindex="-1">3.2.1 正常解密流程（无需更新） <a class="header-anchor" href="#_3-2-1-正常解密流程-无需更新" aria-label="Permalink to &quot;3.2.1 正常解密流程（无需更新）&quot;">​</a></h4><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>用户调用 → HitomiUtils.get_img_url(img_hash) → 返回解密URL</span></span></code></pre></div><h4 id="_3-2-2-更新解密流程-mcp检测触发" tabindex="-1">3.2.2 更新解密流程（mcp检测触发） <a class="header-anchor" href="#_3-2-2-更新解密流程-mcp检测触发" aria-label="Permalink to &quot;3.2.2 更新解密流程（mcp检测触发）&quot;">​</a></h4><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 用户输入 → MCP: &quot;当前图片hash为12345的真实url_new为https://aabb/cc/dd/12345.webp，给我更新加密&quot;</span></span>
<span class="line"><span>2. MCP解析 → 提取img_hash=&quot;12345&quot;, real_url=&quot;https://aabb/cc/dd/12345.webp&quot;</span></span>
<span class="line"><span>3. 验证解密 → HitomiUtils.get_img_url(&quot;12345&quot;) vs real_url</span></span>
<span class="line"><span>4. 如不一致 → 获取最新common.js (httpx请求)</span></span>
<span class="line"><span>5. 分析变化 → 对比新旧JS代码</span></span>
<span class="line"><span>6. 生成更新 → 修改HitomiUtils解密逻辑</span></span>
<span class="line"><span>7. 验证更新 → 再次调用get_img_url()确认修复</span></span></code></pre></div><h3 id="_3-3-系统使用流程" tabindex="-1">3.3 系统使用流程 <a class="header-anchor" href="#_3-3-系统使用流程" aria-label="Permalink to &quot;3.3 系统使用流程&quot;">​</a></h3><h4 id="_3-3-1-正常使用流程" tabindex="-1">3.3.1 正常使用流程 <a class="header-anchor" href="#_3-3-1-正常使用流程" aria-label="Permalink to &quot;3.3.1 正常使用流程&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 直接使用现有解密器，无需任何修改</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __temp.ai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HitomiUtils</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hitomi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HitomiUtils(conf)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decrypted_url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hitomi.get_img_url(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example_hash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="_3-3-2-解密失效时的mcp更新流程" tabindex="-1">3.3.2 解密失效时的MCP更新流程 <a class="header-anchor" href="#_3-3-2-解密失效时的mcp更新流程" aria-label="Permalink to &quot;3.3.2 解密失效时的MCP更新流程&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用户通过MCP输入</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &quot;当前图片hash为12345的真实url_new为https://aabb/cc/dd/12345.webp，给我更新加密&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MCP工具自动处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> update_hitomi_decrypt(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    img_hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12345&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    real_url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://aabb/cc/dd/12345.webp&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新后继续正常使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hitomi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HitomiUtils(conf)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decrypted_url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hitomi.get_img_url(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12345&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 现在应该返回正确URL</span></span></code></pre></div><h4 id="_3-3-3-mcp服务配置" tabindex="-1">3.3.3 MCP服务配置 <a class="header-anchor" href="#_3-3-3-mcp服务配置" aria-label="Permalink to &quot;3.3.3 MCP服务配置&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MCP服务启动时设置URL变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mcp_config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;common_js_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://ltn.gold-usergeneratedcontent.net/common.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;domain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gold-usergeneratedcontent.net&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-实现难点与解决方案" tabindex="-1">4. 实现难点与解决方案 <a class="header-anchor" href="#_4-实现难点与解决方案" aria-label="Permalink to &quot;4. 实现难点与解决方案&quot;">​</a></h2><h3 id="_4-1-js变化检测-重新评估复杂度" tabindex="-1">4.1 JS变化检测（重新评估复杂度） <a class="header-anchor" href="#_4-1-js变化检测-重新评估复杂度" aria-label="Permalink to &quot;4.1 JS变化检测（重新评估复杂度）&quot;">​</a></h3><p><strong>问题</strong>：如何准确检测common.js的关键变化</p><p><strong>现实情况</strong>：</p><ul><li>gg类的m_cases和b值变化已被现有代码动态处理（class gg.<strong>init</strong>()），不需要管gg.js</li><li>真正难点在于common.js中可能出现的新函数和调用链变化</li><li>从hash到真实URL的整个调用逻辑可能发生根本性改变</li></ul><p><strong>真正的技术挑战</strong>：</p><ul><li><strong>函数调用链分析</strong>：检测JS中新增或修改的函数调用顺序</li><li><strong>算法逻辑变化</strong>：识别影响subdomain_from_url、full_path_from_hash等核心方法的变化</li><li><strong>语义理解</strong>：不仅仅是参数提取，需要理解JS逻辑的语义变化</li><li><strong>Python映射</strong>：将JS的新逻辑准确转换为Python的Decrypt类实现</li></ul><h3 id="_4-2-代码生成和应用" tabindex="-1">4.2 代码生成和应用 <a class="header-anchor" href="#_4-2-代码生成和应用" aria-label="Permalink to &quot;4.2 代码生成和应用&quot;">​</a></h3><p><strong>问题</strong>：如何安全地更新现有HitomiUtils代码</p><p><strong>解决方案</strong>：</p><ul><li>生成最小化的更新代码片段</li><li>使用AST操作确保代码正确性</li><li>提供回滚机制防止更新失败</li></ul><h3 id="_4-3-验证机制" tabindex="-1">4.3 验证机制 <a class="header-anchor" href="#_4-3-验证机制" aria-label="Permalink to &quot;4.3 验证机制&quot;">​</a></h3><p><strong>问题</strong>：如何确保更新后的解密逻辑正确</p><p><strong>解决方案</strong>：</p><ul><li>使用用户提供的真实URL进行验证</li><li>多个测试用例确保稳定性</li><li>记录更新历史便于调试</li></ul><h2 id="_5-可行性评估" tabindex="-1">5. 可行性评估 <a class="header-anchor" href="#_5-可行性评估" aria-label="Permalink to &quot;5. 可行性评估&quot;">​</a></h2><h3 id="_5-1-技术可行性-✅-高" tabindex="-1">5.1 技术可行性: ✅ 高 <a class="header-anchor" href="#_5-1-技术可行性-✅-高" aria-label="Permalink to &quot;5.1 技术可行性: ✅ 高&quot;">​</a></h3><ul><li>现有HitomiUtils代码结构清晰，易于分析</li><li>MCP协议提供良好的AI协作支持</li><li>httpx足以处理简单的HTTP请求需求</li></ul><h3 id="_5-2-开发难度-⚠️-中等偏高-重新评估" tabindex="-1">5.2 开发难度: ⚠️ 中等偏高（重新评估） <a class="header-anchor" href="#_5-2-开发难度-⚠️-中等偏高-重新评估" aria-label="Permalink to &quot;5.2 开发难度: ⚠️ 中等偏高（重新评估）&quot;">​</a></h3><ul><li><strong>JS语义分析复杂</strong>：需要理解函数调用链的语义变化，不仅仅是参数提取</li><li><strong>调用链检测困难</strong>：从hash到URL的完整调用路径可能发生根本性改变</li><li><strong>Python映射挑战</strong>：将JS的新逻辑准确转换为Decrypt类的Python实现</li><li><strong>动态更新风险</strong>：修改核心解密逻辑存在破坏现有功能的风险</li></ul><h3 id="_5-3-代码量估计-重新评估" tabindex="-1">5.3 代码量估计（重新评估） <a class="header-anchor" href="#_5-3-代码量估计-重新评估" aria-label="Permalink to &quot;5.3 代码量估计（重新评估）&quot;">​</a></h3><ul><li>HitomiDecryptUpdater: ~200行</li><li>MCP工具函数: ~150行</li><li>JS语义分析器: ~300行（复杂度被低估）</li><li>调用链检测器: ~200行</li><li>代码生成器: ~250行</li><li>测试用例: ~400行</li><li><strong>总计: ~1500行</strong>（vs 之前低估的600行）</li></ul><h3 id="_5-4-开发周期估计-重新评估" tabindex="-1">5.4 开发周期估计（重新评估） <a class="header-anchor" href="#_5-4-开发周期估计-重新评估" aria-label="Permalink to &quot;5.4 开发周期估计（重新评估）&quot;">​</a></h3><ul><li>基础框架搭建: 2天</li><li>JS语义分析和调用链检测: 5-7天（核心难点）</li><li>Python代码生成和映射: 3-4天</li><li>MCP服务集成: 2天</li><li>测试和调试: 4-6天</li><li><strong>总计: 16-21天</strong>（vs 之前低估的4-6天）</li></ul><h2 id="_6-初版功能范围" tabindex="-1">6. 初版功能范围 <a class="header-anchor" href="#_6-初版功能范围" aria-label="Permalink to &quot;6. 初版功能范围&quot;">​</a></h2><h3 id="_6-1-核心功能" tabindex="-1">6.1 核心功能 <a class="header-anchor" href="#_6-1-核心功能" aria-label="Permalink to &quot;6.1 核心功能&quot;">​</a></h3><ul><li>MCP接收用户输入的真实URL</li><li>验证现有解密器是否失效</li><li>获取最新common.js内容</li><li>分析JS变化并生成更新代码</li><li>应用更新到HitomiUtils解密器</li></ul><h2 id="_7-总结" tabindex="-1">7. 总结 <a class="header-anchor" href="#_7-总结" aria-label="Permalink to &quot;7. 总结&quot;">​</a></h2><h3 id="_7-1-关键设计原则" tabindex="-1">7.1 关键设计原则 <a class="header-anchor" href="#_7-1-关键设计原则" aria-label="Permalink to &quot;7.1 关键设计原则&quot;">​</a></h3><ul><li><strong>接口不变</strong>：HitomiUtils解密器接口完全保持原样</li><li><strong>独立更新</strong>：通过独立的更新器处理解密失效</li><li><strong>用户驱动</strong>：用户直接提供真实URL，无需自动验证</li><li><strong>最小复杂度</strong>：避免过度设计，专注核心功能</li></ul><h3 id="_7-2-实施优先级" tabindex="-1">7.2 实施优先级 <a class="header-anchor" href="#_7-2-实施优先级" aria-label="Permalink to &quot;7.2 实施优先级&quot;">​</a></h3><ol><li><strong>第一阶段</strong>：实现基础MCP工具和验证逻辑</li><li><strong>第二阶段</strong>：完善JS分析和代码生成</li><li><strong>第三阶段</strong>：添加错误处理和日志记录</li><li><strong>第四阶段</strong>：优化和测试</li></ol><h3 id="_7-3-成功标准" tabindex="-1">7.3 成功标准 <a class="header-anchor" href="#_7-3-成功标准" aria-label="Permalink to &quot;7.3 成功标准&quot;">​</a></h3><ul><li>用户输入真实URL后，系统能自动修复解密失效</li><li>HitomiUtils.get_img_url()返回正确的解密URL</li><li>整个更新过程对用户透明，无需手动干预</li><li>代码量控制在1500行以内，开发周期不超过21天</li></ul>`,78),h=[l];function p(e,k,r,o,d,c){return a(),i("div",null,h)}const u=s(t,[["render",p]]);export{E as __pageData,u as default};
