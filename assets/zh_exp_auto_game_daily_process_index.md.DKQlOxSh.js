import{_ as a,c as s,o as i,aj as e}from"./chunks/framework.CIu37z2K.js";const u=JSON.parse('{"title":"ai宏脚本","description":"","frontmatter":{},"headers":[],"relativePath":"zh/exp/auto_game_daily_process/index.md","filePath":"zh/exp/auto_game_daily_process/index.md"}'),t={name:"zh/exp/auto_game_daily_process/index.md"},n=e(`<h1 id="ai宏脚本" tabindex="-1">ai宏脚本 <a class="header-anchor" href="#ai宏脚本" aria-label="Permalink to &quot;ai宏脚本&quot;">​</a></h1><p>录制器方式</p><h2 id="由ai生成并持续优化改进的蓝图" tabindex="-1">由ai生成并持续优化改进的蓝图 <a class="header-anchor" href="#由ai生成并持续优化改进的蓝图" aria-label="Permalink to &quot;由ai生成并持续优化改进的蓝图&quot;">​</a></h2><p><a href="./archetypes.html">蓝图文档</a> 基于<code>augment</code></p><h2 id="调整记录摘要" tabindex="-1">调整记录摘要 <a class="header-anchor" href="#调整记录摘要" aria-label="Permalink to &quot;调整记录摘要&quot;">​</a></h2><details class="details custom-block"><summary>Details</summary><p>搜集各种能活用到的第三方库而非自制轮子，基于此分析方案python实现的可行性，以及代码量，难易程度； 对方案进行适当优化调准；</p><p>你需要把方案写在蓝图文档内，并不断根据给你对话要求的调整来实时更新这份文档； 这份文档最大作用是实施时的对话，或是其他对话更新方案时能即时使用；</p><p>auto_game_daily_process其下index.md是我定义的最根本最正确的需求；</p><p>archetypes.md则是ai通过我的描述扩展优化出的初版蓝图； 现在你需要根据方案在code\\auto_game_daily_process目录下进行项目代码的编写实施和测试；</p><p>使用astral-sh/uv管理而非传统pip</p><p>请更新 archetypes.md 文档中的 &quot;3.1 核心模块设计&quot; 部分。当前的代码示例包含了过多的实现细节（如 if/else 逻辑、print 语句、logger.info 等），这些不应该出现在架构设计文档中。</p><hr><p>请按以下要求重构这部分内容：</p><ol><li><strong>移除实现细节</strong>：删除所有具体的代码逻辑，如条件判断、日志输出、错误处理等</li><li><strong>保留核心接口</strong>：只展示类的主要方法名、参数和返回值</li><li><strong>添加方法文档</strong>：在每个方法的 docstring 中提供详细的功能描述和实现指导，这样其他开发者或AI助手可以根据这些描述生成具体的实现代码</li><li><strong>突出架构设计</strong>：重点展示模块间的关系和数据流，而不是具体实现</li></ol><p>目标是让这个部分成为一个清晰的架构蓝图，其他人可以根据方法文档中的描述来实现具体功能，而不需要在设计文档中看到具体的代码实现。</p></details><h2 id="蓝图草稿" tabindex="-1">蓝图草稿 <a class="header-anchor" href="#蓝图草稿" aria-label="Permalink to &quot;蓝图草稿&quot;">​</a></h2><h3 id="_1-点击开始录制" tabindex="-1">1.点击开始录制 <a class="header-anchor" href="#_1-点击开始录制" aria-label="Permalink to &quot;1.点击开始录制&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TBS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tbs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TBS()</span></span></code></pre></div><h3 id="_2-执行点击操作" tabindex="-1">2.执行点击操作 <a class="header-anchor" href="#_2-执行点击操作" aria-label="Permalink to &quot;2.执行点击操作&quot;">​</a></h3><ol><li>录制时，鼠标点击窗口后，按a键，获得窗口句柄win_handle1，窗口的整体截图wh_spic;</li><li>按c键，然后触发截图功能让用户截图spic; 1 计算spic在wh_spic的位置，获得spic中心点位置</li></ol><p>2.1 按d键，触发选择自己已写的函数</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TbsOperate</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span></code></pre></div><h3 id="_3-保存流程持久化" tabindex="-1">3.保存流程持久化 <a class="header-anchor" href="#_3-保存流程持久化" aria-label="Permalink to &quot;3.保存流程持久化&quot;">​</a></h3><p>使用pkl保存流程相关的信息</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TbsProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tbs.create(TbsOperate) </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TbsProcess</span></span></code></pre></div><h3 id="_4-执行已录制的流程" tabindex="-1">4.执行已录制的流程 <a class="header-anchor" href="#_4-执行已录制的流程" aria-label="Permalink to &quot;4.执行已录制的流程&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tbs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TBS()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tbs.do(TbsProcess)</span></span></code></pre></div>`,18),l=[n];function p(h,o,r,d,c,k){return i(),s("div",null,l)}const _=a(t,[["render",p]]);export{u as __pageData,_ as default};
